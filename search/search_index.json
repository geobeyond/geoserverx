{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geoserverx","text":"<p><code>geoserverx</code> is a modern Python package that provides an efficient and scalable way to interact with Geoserver REST APIs. It leverages the asynchronous capabilities of Python to offer a high-performance and reliable solution for managing Geoserver data and services.</p> <p>With geoserverx, users can easily access and modify data in Geoserver, such as uploading and deleting shapefiles, publishing layers, creating workspaces, styles, etc. . The package supports asynchronous requests along with synchronous method to the Geoserver REST API, which enables users to perform multiple tasks simultaneously, improving performance and reducing wait times.</p> <p>Apart from being implemented as Python package, geoserverx also provides CLI support for all of its operations. Which makes it useful for people who want to avoid Python all-together. </p> <p>Checkout official pypi link here</p>"},{"location":"#get-started","title":"Get Started","text":"<p><code>geoserverx</code> can be installed using <code>pip</code> or <code>pip3</code></p> <pre><code>pip install geoserverx\n\n---&gt; 100%\n</code></pre> <p>After which , It can be used in Python projects using sync, async methods or can ve used as Command Line tool</p>"},{"location":"#for-testing-purpose","title":"For testing purpose","text":"<p>If you don't have geoserver installed locally, feel free to use following command to quickly spin up Geoserver using Docker</p> <pre><code>docker run -e GEOSERVER_ADMIN_USER=admin -e GEOSERVER_ADMIN_PASSWORD=geoserver -e SAMPLE_DATA=true -p 8080:8080 kartoza/geoserver\n</code></pre> <p>Please not that this will work on amd64 architecture machines.</p>"},{"location":"pages/async/","title":"Asynchronous way of using geoserverx","text":"<p><code>geoserverx</code> allows user to call methods asynchronously. </p> <p>Get started</p> <p>To start using <code>geoserverx</code> in Sync mode, create a new instance of <code>AsyncGeoServerX</code> Class</p>"},{"location":"pages/async/#setup-class-instance","title":"Setup Class instance","text":"<p><code>AsyncGeoServerX</code> Class has default username, password, url which points to default geoserver settings.  <pre><code># Import class from package\nfrom geoserverx._async.gsx import AsyncGeoServerX \n# Create class Instance with default paramaters\nclient = AsyncGeoServerX()\n</code></pre></p> <p>These paramaters however can be changed as follows <pre><code># Import class from package\nfrom geoserverx._async.gsx import AsyncGeoServerX\n# Create class Instance with custom paramaters\nclient = AsyncGeoServerX(username='mygeos', password='SecuredPass',url='http://127.0.0.1:9090/geoserver/rest/')\n</code></pre></p> <p>This class can also be used as context manager to manage the opening and closing connection automatically. <pre><code># Import class from package\nfrom geoserverx._async.gsx import  AsyncGeoServerX,GeoServerXAuth\nimport asyncio\n# Create class Instance with custom paramaters\nclient = AsyncGeoServerX(username='mygeos', password='SecuredPass',url='http://127.0.0.1:9090/geoserver/rest/')\n\n#Using with as \nasync def main():\n        async with client as cl:\n                response = await cl.get_all_workspaces()\n                print(response)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n</code></pre></p>"},{"location":"pages/async/example/","title":"Examples","text":"<p>Here, we'll have a look at implementation <code>geoserverx</code> asynchronous Class</p> <p>Get started</p> <p>To start using <code>geoserverx</code> in Async mode, create a new instance of <code>AsyncGeoServerX</code> Class</p>"},{"location":"pages/async/example/#setup-class-instance","title":"Setup Class instance","text":"<p><code>AsyncGeoServerX</code> Class has default username, password, url which points to default geoserver settings.  <pre><code># Import class from package\nfrom geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n# Create class Instance with default paramaters\nclient = AsyncGeoServerX()\n</code></pre> We'll assume connection to local geoserver with default credentials</p>"},{"location":"pages/async/example/#get-all-workspaces","title":"Get all workspaces","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_info_raster_workspaces(url, username, password):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_all_workspaces())\n\nasync def main():\n    await asyncio.gather(get_info_raster_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver'),get_info_raster_workspaces(url='http://89.233.108.250:8080/geoserver/rest',username='admin', password='myP'),get_info_raster_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver'))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\n-------------start-----------------\n-------------start-----------------\nworkspaces=workspaceDict(workspace=[WorkspaceInBulk(name='MySimple', href='http://localhost:8080/geoserver/rest/workspaces/MySimple.json'), WorkspaceInBulk(name='MyHidden', href='http://localhost:8080/geoserver/rest/workspaces/MyHidden.json'), WorkspaceInBulk(name='MyDefault', href='http://localhost:8080/geoserver/rest/workspaces/MyDefault.json'), WorkspaceInBulk(name='nondefaultws', href='http://localhost:8080/geoserver/rest/workspaces/nondefaultws.json'), WorkspaceInBulk(name='mydefaultws', href='http://localhost:8080/geoserver/rest/workspaces/mydefaultws.json'), WorkspaceInBulk(name='ajadasfasdf', href='http://localhost:8080/geoserver/rest/workspaces/ajadasfasdf.json'), WorkspaceInBulk(name='ajada', href='http://localhost:8080/geoserver/rest/workspaces/ajada.json'), WorkspaceInBulk(name='aja', href='http://localhost:8080/geoserver/rest/workspaces/aja.json'), WorkspaceInBulk(name='cesium', href='http://localhost:8080/geoserver/rest/workspaces/cesium.json')])\n'''\n</code></pre>"},{"location":"pages/async/example/#get-information-about-cesium-workspace","title":"Get Information about <code>cesium</code> workspace","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_info_raster_workspaces(url, username, password,workspace):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_workspace(workspace))\n\nasync def main():\n    await asyncio.gather(get_info_raster_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',workspace='cesium'))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\nworkspace=SingleWorkspace(name='cesium', isolated=False, dateCreated='2023-02-13 06:43:28.793 UTC', dataStores='http://localhost:8080/geoserver/rest/workspaces/cesium/datastores.json', coverageStores='http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores.json', wmsStores='http://localhost:8080/geoserver/rest/workspaces/cesium/wmsstores.json', wmtsStores='http://localhost:8080/geoserver/rest/workspaces/cesium/wmtsstores.json')\n'''\n</code></pre>"},{"location":"pages/async/example/#create-new-workspaces","title":"Create New workspaces","text":"<ul> <li>MyDefault - Default and not Isolated</li> <li>MyHidden - Not Default and Isolated</li> <li>MySimple - Not Default and not Isolated</li> </ul> <pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def create_single_workspaces(url, username, password,workspace,default,isolated):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.create_workspace(workspace, default,isolated))\n\nasync def main():\n    await asyncio.gather(create_single_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='AsyncMyDefault',default=True,isolated= False),\ncreate_single_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='AsyncMyHidden',default=False,isolated= True),\ncreate_single_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='AsyncMySimple',default=False,isolated= False))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\n-------------start-----------------\n-------------start-----------------\ncode=201 response='Data added successfully'\ncode=201 response='Data added successfully'\ncode=201 response='Data added successfully'\n'''\n</code></pre>"},{"location":"pages/async/example/#get-all-vector-stores-in-cesium-workspace","title":"Get all Vector stores in <code>cesium</code> workspace","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def create_single_workspaces(url, username, password,workspace):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_vector_stores_in_workspaces(workspace))\n\nasync def main():\n    await asyncio.gather(create_single_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium'))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\ndataStores=DataStoreDict(dataStore=[DataStoreInBulk(name='mygpkgs', href='http://localhost:8080/geoserver/rest/workspaces/cesium/datastores/mygpkgs.json'), DataStoreInBulk(name='myshp', href='http://localhost:8080/geoserver/rest/workspaces/cesium/datastores/myshp.json'), DataStoreInBulk(name='mysql', href='http://localhost:8080/geoserver/rest/workspaces/cesium/datastores/mysql.json')])\n'''\n</code></pre>"},{"location":"pages/async/example/#get-information-of-vector-store-myshp-in-cesium-workspace","title":"Get Information of Vector store <code>myshp</code> in <code>cesium</code> workspace","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_info_vector_workspaces(url, username, password,workspace,store):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_vector_store(workspace,store))\n\nasync def main():\n    await asyncio.gather(get_info_vector_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium',store='myshp'))\n\nasyncio.run(main())\n\n\n''' Console \n-------------start-----------------\ndataStore=DataStoreModelDetails(name='myshp', description=None, enabled=True, workspace=WorkspaceInBulk(name='cesium', href='http://localhost:8080/geoserver/rest/workspaces/cesium.json'), connectionParameters=EntryItem(entry=[DatastoreConnection(key='namespace', path='cesium'), DatastoreConnection(key='url', path='file:/path/to/nyc.shp')]), dateCreated='2023-02-28 18:14:01.199 UTC', dateModified=None, featureTypes='http://localhost:8080/geoserver/rest/workspaces/cesium/datastores/myshp/featuretypes.json')\n'''\n</code></pre>"},{"location":"pages/async/example/#get-all-raster-stores-in-cesium-workspace","title":"Get all Raster stores in <code>cesium</code> workspace","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_all_raster_workspaces(url, username, password,workspace):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_raster_stores_in_workspaces(workspace))\n\nasync def main():\n    await asyncio.gather(get_all_raster_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',workspace='cesium'))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\ncoverageStores=CoveragesStoresDict(coverageStore=[CoveragesStoreInBulk(name='dem', href='http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/dem.json'), CoveragesStoreInBulk(name='dsm', href='http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm.json'), CoveragesStoreInBulk(name='ortho', href='http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/ortho.json')])\n'''\n</code></pre>"},{"location":"pages/async/example/#get-information-of-raster-store-dsm-in-cesium-workspace","title":"Get Information of Raster store <code>dsm</code> in <code>cesium</code> workspace","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_info_raster_workspaces(url, username, password,workspace,store):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_raster_store(workspace,store))\n\nasync def main():\n    await asyncio.gather(get_info_raster_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',workspace='cesium',store='dsm'))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\ncoverageStore=CoveragesStoreModelDetail(name='dsm', description=None, enabled=True, workspace=WorkspaceInBulk(name='cesium', href='http://localhost:8080/geoserver/rest/workspaces/cesium.json'), url='file:///Users/krishnaglodha/Desktop/IGI_DATA/DSM/IGI_DSM1m1.tif', coverages='http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm/coverages.json', dateCreated='2023-02-23 13:39:48.417 UTC', metadata=None)\n'''\n</code></pre>"},{"location":"pages/async/example/#get-all-styles-in-geoserver","title":"Get all Styles in geoserver","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_info_raster_workspaces(url, username, password):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_allstyles())\n\nasync def main():\n    await asyncio.gather(get_info_raster_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver'))\n\nasyncio.run(main())\n\n''' Console \n-------------start-----------------\nstyles=allStyleDict(style=[allStyleList(name='burg', href='http://localhost:8080/geoserver/rest/styles/burg.json'), allStyleList(name='capitals', href='http://localhost:8080/geoserver/rest/styles/capitals.json'), allStyleList(name='cite_lakes', href='http://localhost:8080/geoserver/rest/styles/cite_lakes.json'), allStyleList(name='dem', href='http://localhost:8080/geoserver/rest/styles/dem.json'), allStyleList(name='generic', href='http://localhost:8080/geoserver/rest/styles/generic.json'), allStyleList(name='giant_polygon', href='http://localhost:8080/geoserver/rest/styles/giant_polygon.json'), allStyleList(name='grass', href='http://localhost:8080/geoserver/rest/styles/grass.json'), allStyleList(name='green', href='http://localhost:8080/geoserver/rest/styles/green.json'), allStyleList(name='line', href='http://localhost:8080/geoserver/rest/styles/line.json'), allStyleList(name='poi', href='http://localhost:8080/geoserver/rest/styles/poi.json'), allStyleList(name='point', href='http://localhost:8080/geoserver/rest/styles/point.json'), allStyleList(name='poly_landmarks', href='http://localhost:8080/geoserver/rest/styles/poly_landmarks.json'), allStyleList(name='polygon', href='http://localhost:8080/geoserver/rest/styles/polygon.json'), allStyleList(name='pophatch', href='http://localhost:8080/geoserver/rest/styles/pophatch.json'), allStyleList(name='population', href='http://localhost:8080/geoserver/rest/styles/population.json'), allStyleList(name='rain', href='http://localhost:8080/geoserver/rest/styles/rain.json'), allStyleList(name='raster', href='http://localhost:8080/geoserver/rest/styles/raster.json'), allStyleList(name='restricted', href='http://localhost:8080/geoserver/rest/styles/restricted.json'), allStyleList(name='simple_roads', href='http://localhost:8080/geoserver/rest/styles/simple_roads.json'), allStyleList(name='simple_streams', href='http://localhost:8080/geoserver/rest/styles/simple_streams.json'), allStyleList(name='tiger_roads', href='http://localhost:8080/geoserver/rest/styles/tiger_roads.json')])\n'''\n</code></pre>"},{"location":"pages/async/example/#get-single-style-in-geoserver","title":"Get Single Style in geoserver","text":"<pre><code>from geoserverx._async.gsx import AsyncGeoServerX\nimport asyncio\n\nasync def get_info_raster_workspaces(url, username, password,style):\n    print(\"-------------start-----------------\")\n    client = AsyncGeoServerX(username, password,url)\n    print(await client.get_style(style))\n\nasync def main():\n    await asyncio.gather(get_info_raster_workspaces(\n        url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',style='poi'))\n\nasyncio.run(main())\n''' Console \n-------------start-----------------\nstyle=SingleStyleDict(name='poi', format='sld', languageVersion=langVersion(version='1.0.0'), filename='poi.sld')\n'''\n</code></pre>"},{"location":"pages/async/raster-store/","title":"Raster Stores","text":"<p><code>geoserverx</code> allows users to access all/one raster stores from geoserver</p>"},{"location":"pages/async/raster-store/#get-all-raster-stores","title":"Get all raster stores","text":"<p>This command fetches all Vector store available in given workspace from geoserver. </p> <pre><code># Get all raster stores available in `cite` workspace\nawait client.get_raster_stores_in_workspaces('cite')\n</code></pre>"},{"location":"pages/async/raster-store/#get-single-raster-store","title":"Get single raster store","text":"<p>This command fetches all Information about raster store available in given workspace from geoserver. </p> <pre><code># Get all information about `image` raster stores available in `cite` workspace\nawait client.get_raster_store(workspace='cite', store='image') \n</code></pre>"},{"location":"pages/async/style/","title":"Style","text":""},{"location":"pages/async/style/#get-all-styles","title":"Get all Styles","text":"<p>This command fetches all Styles available in geoserver. </p> <pre><code># Get all styles available in geoserver\nawait client.get_allstyles()\n</code></pre>"},{"location":"pages/async/style/#get-single-style","title":"Get single Style","text":"<p>This command fetches information about particular Style from geoserver. </p> <pre><code># Get information about `population` style from geoserver\nawait client.get_style('population') \n</code></pre>"},{"location":"pages/async/vector-store/","title":"Vector Stores","text":"<p><code>geoserverx</code> allows users to access all/one vector stores from geoserver. As of now, <code>geoserverx</code> also supports new vector store creation for <code>shapefile</code> and <code>gpkg</code> data</p>"},{"location":"pages/async/vector-store/#get-all-vector-stores","title":"Get all Vector stores","text":"<p>This command fetches all Vector store available in given workspace from geoserver. </p> <pre><code># Get all vector stores available in `cite` workspace\nawait client.get_vector_stores_in_workspaces('cite')\n</code></pre>"},{"location":"pages/async/vector-store/#get-single-vector-store","title":"Get single Vector store","text":"<p>This command fetches all Information about Vector store available in given workspace from geoserver. </p> <pre><code># Get all information about `shape` vector stores available in `cite` workspace\nawait client.get_vector_store(workspace='cite', store='shape') \n</code></pre>"},{"location":"pages/async/vector-store/#create-new-shapefile-vector-store","title":"Create new shapefile Vector store","text":"<p>Use this command to create new Vector store based on <code>shapefile</code> path. </p> <pre><code># Create new store in `cite` workspace with name `shape` and using `path/for/shapefile` as local shapefile path\nawait client.create_file_store(workspace='cite', store='shape', file='path/for/shapefile', service_type='shapefile') \n</code></pre>"},{"location":"pages/async/vector-store/#create-new-geopackage-vector-store","title":"Create new geopackage Vector store","text":"<p>Use this command to create new Vector store based on <code>Geopackage</code> path. </p> <pre><code># Create new store in `cite` workspace with name `shape` and using `path/for/gpkg` as local Geopackage path\nawait client.create_file_store(workspace='cite', store='shape', file='path/for/gpkg', service_type='gpkg') \n</code></pre>"},{"location":"pages/async/vector-store/#create-new-postgis-vector-store","title":"Create new PostGIS Vector store","text":"<p>Use this command to create new Vector store based on <code>PostGIS</code> connection. </p> <pre><code># Create new store in `cite` workspace with name `pg` and using `PostgreSQL` credentials\nawait client.create_pg_store(\n        name=\"pg\",\n        workspace=\"cite\",\n        host=\"localhost\",\n        port=5432,\n        username=\"XXXXXXXX\",\n        password=\"XXXXXXXX\",\n        database=\"test\")\n</code></pre>"},{"location":"pages/async/workspace/","title":"Workspaces","text":"<p><code>geoserverx</code> allows users to access all/one workspace from geoserver, along with ability to add new workspaces. </p>"},{"location":"pages/async/workspace/#get-all-workspaces","title":"Get all workspaces","text":"<p>This command fetches all workspaces available in geoserver. No paramters are required to be passed.</p> <pre><code># Get all workspaces in geoserver\nawait client.get_all_workspaces()\n</code></pre>"},{"location":"pages/async/workspace/#get-single-workspace","title":"Get single workspace","text":"<p>This command fetches workspace with paramter as name of it from geoserver. <pre><code># Get workspace with name `cite`\nawait client.get_workspace('cite')\n</code></pre></p>"},{"location":"pages/async/workspace/#create-workspace","title":"Create workspace","text":"<p>This command allows user to create new workspace.  Creating new workspace requires following parameters</p> <ul> <li>Name <code>str</code> : To define Name of the workspace</li> <li>default <code>bool</code> : To define whether to keep workspace as default or not</li> <li>Isolated <code>bool</code> : To define whether to keep workspace Isolated or not</li> </ul> <pre><code>#Create new workspace with name `my_wrkspc` , make it Default and Isolated\nawait client.create_workspace(name='my_wrkspc',default=True,Isolated=True)\n</code></pre>"},{"location":"pages/cli/","title":"Command line access","text":"<p><code>geoserverx</code> allows users to leverage power of command line to communicate with geoserver. <code>gsx</code> is a command line tool by <code>geoserverx</code>. </p>"},{"location":"pages/cli/#installation","title":"Installation","text":"<p>To use <code>gsx</code> , Install <code>geoserverx</code> using <code>pip</code> on local environment. </p> <pre><code>pip install geoserverx\n\n---&gt; 100%\n\n$ gsx --help\nUsage: gsx [OPTIONS] COMMAND [ARGS]...\n\n  GeoserverX CLI tools to talk to Geoserver efficiently .\n\nOptions:\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n\nCommands:\n  create-file       Create Vector Layer in Geoserver\n  create-workspace  Add workspace in the Geoserver\n  raster-st-wp      Get raster stores in specific workspaces\n  raster-store      Get raster store information in specific workspaces\n  style             Get style in Geoserver\n  styles            Get all styles in Geoserver\n  vector-st-wp      Get vector stores in specific workspaces\n  vector-store      Get vector store information in specific workspaces\n  workspace         Get workspace in the Geoserver\n  workspaces        Get all workspaces in the Geoserver\n</code></pre> <p>Checkout other pages to understand how to use Command line </p>"},{"location":"pages/cli/example/","title":"Examples","text":"<p>Here, we'll have a look at implementation <code>geoserverx</code> synchronous Class.</p> <p>Get started</p> <p>To start using <code>gsx</code> CLI tool, install <code>geoserverx</code> package and turn on the environment.</p>"},{"location":"pages/cli/example/#setup-cli-instance","title":"Setup CLI instance","text":"<pre><code>$ pip install geoserverx\n---&gt; 100%\n\n$  gsx\nUsage: gsx [OPTIONS] COMMAND [ARGS]...\nTry 'gsx --help' for help.\n\nError: Missing command.\n</code></pre> <p>We'll assume connection to local geoserver with default credentials </p>"},{"location":"pages/cli/example/#get-all-workspaces","title":"Get all workspaces","text":"<pre><code>$ gsx workspaces\n\n{\"workspaces\": {\"workspace\": [{\"name\": \"cesium\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium.json\"}]}}\n</code></pre>"},{"location":"pages/cli/example/#get-single-workspaces","title":"Get single workspaces","text":"<pre><code>$ gsx workspace --workspace cesium\n{\"workspace\": {\"name\": \"cesium\", \"isolated\": false, \"dateCreated\": \"2023-02-13 \n06:43:28.793 UTC\", \"dataStores\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/datastores.json\", \n\"coverageStores\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores.json\", \n\"wmsStores\": \"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/wmsstores.json\", \n\"wmtsStores\": \"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/wmtsstores.json\"}}\n</code></pre>"},{"location":"pages/cli/example/#create-single-workspaces","title":"Create single workspaces","text":"<pre><code>$ gsx create-workspace --workspace mydefaultws --default\ncode=201 response='Data added successfully'\n</code></pre>"},{"location":"pages/cli/example/#get-all-vector-stores","title":"Get all Vector stores","text":"<pre><code>$ gsx vector-st-wp --workspace cesium\n{\"dataStores\": {\"dataStore\": [{\"name\": \"mysqlllllll\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/datastores/mysqlllllll.json\"}]}}\n</code></pre>"},{"location":"pages/cli/example/#get-single-vector-store-information","title":"Get single Vector store information","text":"<pre><code>$ gsx vector-store --workspace cesium --store mysqlllllll\n{\"dataStore\": {\"name\": \"mysqlllllll\", \"description\": null, \"enabled\": true, \"workspace\": \n{\"name\": \"cesium\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium.json\"}, \"connectionParameters\": \n{\"entry\": [{\"key\": \"Evictor run periodicity\", \"path\": \"300\"}, {\"key\": \"fetch size\", \n\"path\": \"1000\"}, {\"key\": \"Expose primary keys\", \"path\": \"false\"}, {\"key\": \"validate \nconnections\", \"path\": \"true\"}, {\"key\": \"Connection timeout\", \"path\": \"20\"}, {\"key\": \n\"Batch insert size\", \"path\": \"1\"}, {\"key\": \"database\", \"path\": \"appsolicitous_dcra\"}, \n{\"key\": \"port\", \"path\": \"3306\"}, {\"key\": \"passwd\", \"path\": \n\"crypt1:njsGJk9CEY8jiaqfSYyQGZeB9RLB2sh7\"}, {\"key\": \"storage engine\", \"path\": \"MyISAM\"}, \n{\"key\": \"min connections\", \"path\": \"1\"}, {\"key\": \"dbtype\", \"path\": \"mysql\"}, {\"key\": \n\"host\", \"path\": \"23.29.118.44\"}, {\"key\": \"namespace\", \"path\": \"cesium\"}, {\"key\": \"max \nconnections\", \"path\": \"10\"}, {\"key\": \"Evictor tests per run\", \"path\": \"3\"}, {\"key\": \"Test\nwhile idle\", \"path\": \"true\"}, {\"key\": \"user\", \"path\": \"appsolicitous_dcra\"}, {\"key\": \"Max\nconnection idle time\", \"path\": \"300\"}]}, \"dateCreated\": \"2023-02-28 10:38:52.70 UTC\", \n\"dateModified\": null, \"featureTypes\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/datastores/mysqlllllll/featuretyp\nes.json\"}}\n</code></pre>"},{"location":"pages/cli/example/#get-all-raster-stores","title":"Get all raster stores","text":"<pre><code>$ gsx raster-st-wp --workspace cesium\n{\"coverageStores\": {\"coverageStore\": [{\"name\": \"dem\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/dem.json\"}, \n{\"name\": \"dsm\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm.json\"}, \n{\"name\": \"ortho\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/ortho.json\"}]}}\n</code></pre>"},{"location":"pages/cli/example/#get-single-raster-store-information","title":"Get single raster store information","text":"<pre><code>$ gsx raster-store --workspace cesium --store dsm\n{\"coverageStore\": {\"name\": \"dsm\", \"description\": null, \"enabled\": true, \"workspace\": \n{\"name\": \"cesium\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium.json\"}, \"url\": \n\"file:///Users/krishnaglodha/Desktop/IGI_DATA/DSM/IGI_DSM1m1.tif\", \"coverages\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm/coverages.json\n\", \"dateCreated\": \"2023-02-23 13:39:48.417 UTC\", \"metadata\": null}}\n</code></pre>"},{"location":"pages/cli/example/#get-all-styles","title":"Get all styles","text":"<pre><code>$ gsx styles       \n{\"styles\": {\"style\": [{\"name\": \"burg\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/styles/burg.json\"}, {\"name\": \"capitals\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/styles/capitals.json\"}, {\"name\": \"cite_lakes\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/cite_lakes.json\"}, {\"name\": \"dem\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/dem.json\"}, {\"name\": \"generic\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/generic.json\"}, {\"name\": \n\"giant_polygon\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/styles/giant_polygon.json\"}, {\"name\": \"grass\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/grass.json\"}, {\"name\": \"green\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/green.json\"}, {\"name\": \"line\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/line.json\"}]}}\n</code></pre>"},{"location":"pages/cli/example/#get-single-style-information","title":"Get single style information","text":"<pre><code>$ gsx style --style p\noi\n{\"style\": {\"name\": \"poi\", \"format\": \"sld\", \"languageVersion\": {\"version\": \"1.0.0\"}, \n\"filename\": \"poi.sld\"}}\n</code></pre>"},{"location":"pages/cli/raster-store/","title":"Raster Stores","text":"<p><code>geoserverx</code> allows users to access all/one raster stores from geoserver. As of now, <code>geoserverx</code> also supports new raster store creation for <code>shapefile</code> and <code>gpkg</code> data</p> <p>Get started</p> <p>To start using <code>geoserverx</code> using command line, activate the Environment where package is installed and use <code>gsx</code> command</p>"},{"location":"pages/cli/raster-store/#paramters-for-all-raster-stores-in-workspace-command","title":"Paramters for all raster stores in Workspace command","text":"<pre><code>$ gsx raster-st-wp --help\nUsage: gsx raster-st-wp [OPTIONS]\n\n  Get raster stores in specific workspaces\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --workspace TEXT        Workspace name  [required]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>As listed above, <code>raster-st-wp</code> command accepts following parameters. </p> <ul> <li>request type ( sync or async )</li> <li>url - Geoserver REST URL</li> <li>password - Password for geoserver</li> <li>username - Username for geoserver</li> </ul> <p>All these parameters have default value setup which will work for local default installation. Apart from this <code>workspace</code> paramters must be added which aims at the workspace we are interested in</p>"},{"location":"pages/cli/raster-store/#get-all-raster-stores","title":"Get all raster stores","text":"<pre><code>$ gsx raster-st-wp --workspace cesium\n{\"coverageStores\": {\"coverageStore\": [{\"name\": \"dem\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/dem.json\"}, \n{\"name\": \"dsm\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm.json\"}, \n{\"name\": \"ortho\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/ortho.json\"}]}}\n</code></pre>"},{"location":"pages/cli/raster-store/#paramters-for-single-raster-stores-command","title":"Paramters for single raster stores command","text":"<pre><code>$ gsx raster-store --help\nUsage: gsx raster-store [OPTIONS]\n\n  Get raster store information in specific workspaces\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --workspace TEXT        Workspace name  [required]\n  --store TEXT            Store name  [required]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>This command takes an additional parameter of name of the store.</p>"},{"location":"pages/cli/raster-store/#get-single-raster-store-information","title":"Get single raster store information","text":"<pre><code>$ gsx raster-store --workspace cesium --store dsm\n{\"coverageStore\": {\"name\": \"dsm\", \"description\": null, \"enabled\": true, \"workspace\": \n{\"name\": \"cesium\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium.json\"}, \"url\": \n\"file:///Users/krishnaglodha/Desktop/IGI_DATA/DSM/IGI_DSM1m1.tif\", \"coverages\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm/coverages.json\n\", \"dateCreated\": \"2023-02-23 13:39:48.417 UTC\", \"metadata\": null}}\n</code></pre>"},{"location":"pages/cli/style/","title":"Style","text":"<p><code>geoserverx</code> allows users to access all/one raster stores from geoserver. As of now, <code>geoserverx</code> also supports new raster store creation for <code>shapefile</code> and <code>gpkg</code> data</p> <p>Get started</p> <p>To start using <code>geoserverx</code> using command line, activate the Environment where package is installed and use <code>gsx</code> command</p>"},{"location":"pages/cli/style/#paramters-for-all-styles-command","title":"Paramters for all styles command","text":"<pre><code>$ gsx styles --help\nUsage: gsx styles [OPTIONS]\n\n  Get all styles in Geoserver\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>As listed above, <code>styles</code> command accepts following parameters. </p> <ul> <li>request type ( sync or async )</li> <li>url - Geoserver REST URL</li> <li>password - Password for geoserver</li> <li>username - Username for geoserver</li> </ul> <p>All these parameters have default value setup which will work for local default installation. </p>"},{"location":"pages/cli/style/#get-all-styles","title":"Get all styles","text":"<pre><code>$ gsx styles       \n{\"styles\": {\"style\": [{\"name\": \"burg\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/styles/burg.json\"}, {\"name\": \"capitals\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/styles/capitals.json\"}, {\"name\": \"cite_lakes\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/cite_lakes.json\"}, {\"name\": \"dem\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/dem.json\"}, {\"name\": \"generic\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/generic.json\"}, {\"name\": \n\"giant_polygon\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/styles/giant_polygon.json\"}, {\"name\": \"grass\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/grass.json\"}, {\"name\": \"green\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/green.json\"}, {\"name\": \"line\", \n\"href\": \"http://127.0.0.1:8080/geoserver/rest/styles/line.json\"}]}}\n</code></pre>"},{"location":"pages/cli/style/#paramters-for-single-style-command","title":"Paramters for single style command","text":"<pre><code>$ gsx style --help \nUsage: gsx style [OPTIONS]\n\n  Get style in Geoserver\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --style TEXT            Style name  [required]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>This command takes an additional parameter of name of the style.</p>"},{"location":"pages/cli/style/#get-single-style-information","title":"Get single style information","text":"<pre><code>$ gsx style --style p\noi\n{\"style\": {\"name\": \"poi\", \"format\": \"sld\", \"languageVersion\": {\"version\": \"1.0.0\"}, \n\"filename\": \"poi.sld\"}}\n</code></pre>"},{"location":"pages/cli/vector-store/","title":"Vector Stores","text":"<p><code>geoserverx</code> allows users to access all/one vector stores from geoserver. As of now, <code>geoserverx</code> also supports new vector store creation for <code>shapefile</code> and <code>gpkg</code> data</p> <p>Get started</p> <p>To start using <code>geoserverx</code> using command line, activate the Environment where package is installed and use <code>gsx</code> command</p>"},{"location":"pages/cli/vector-store/#paramters-for-all-vector-stores-in-workspace-command","title":"Paramters for all Vector stores in Workspace command","text":"<pre><code>$ gsx vector-st-wp --help\nUsage: gsx vector-st-wp [OPTIONS]\n\n  Get vector stores in specific workspaces\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --workspace TEXT        Workspace name  [required]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>As listed above, <code>vector-st-wp</code> command accepts following parameters. </p> <ul> <li>request type ( sync or async )</li> <li>url - Geoserver REST URL</li> <li>password - Password for geoserver</li> <li>username - Username for geoserver</li> </ul> <p>All these parameters have default value setup which will work for local default installation. Apart from this <code>workspace</code> paramters must be added which aims at the workspace we are interested in</p>"},{"location":"pages/cli/vector-store/#get-all-vector-stores","title":"Get all Vector stores","text":"<pre><code>$ gsx vector-st-wp --workspace cesium\n{\"dataStores\": {\"dataStore\": [{\"name\": \"mysqlllllll\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/datastores/mysqlllllll.json\"}]}}\n</code></pre>"},{"location":"pages/cli/vector-store/#paramters-for-single-vector-stores-command","title":"Paramters for single Vector stores command","text":"<pre><code>$ gsx vector-store --help\nUsage: gsx vector-store [OPTIONS]\n\n  Get vector store information in specific workspaces\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --workspace TEXT        Workspace name  [required]\n  --store TEXT            Store name  [required]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>This command takes an additional parameter of name of the store.</p>"},{"location":"pages/cli/vector-store/#get-single-vector-store-information","title":"Get single Vector store information","text":"<pre><code>$ gsx vector-store --workspace cesium --store mysqlllllll\n{\"dataStore\": {\"name\": \"mysqlllllll\", \"description\": null, \"enabled\": true, \"workspace\": \n{\"name\": \"cesium\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium.json\"}, \"connectionParameters\": \n{\"entry\": [{\"key\": \"Evictor run periodicity\", \"path\": \"300\"}, {\"key\": \"fetch size\", \n\"path\": \"1000\"}, {\"key\": \"Expose primary keys\", \"path\": \"false\"}, {\"key\": \"validate \nconnections\", \"path\": \"true\"}, {\"key\": \"Connection timeout\", \"path\": \"20\"}, {\"key\": \n\"Batch insert size\", \"path\": \"1\"}, {\"key\": \"database\", \"path\": \"appsolicitous_dcra\"}, \n{\"key\": \"port\", \"path\": \"3306\"}, {\"key\": \"passwd\", \"path\": \n\"crypt1:njsGJk9CEY8jiaqfSYyQGZeB9RLB2sh7\"}, {\"key\": \"storage engine\", \"path\": \"MyISAM\"}, \n{\"key\": \"min connections\", \"path\": \"1\"}, {\"key\": \"dbtype\", \"path\": \"mysql\"}, {\"key\": \n\"host\", \"path\": \"23.29.118.44\"}, {\"key\": \"namespace\", \"path\": \"cesium\"}, {\"key\": \"max \nconnections\", \"path\": \"10\"}, {\"key\": \"Evictor tests per run\", \"path\": \"3\"}, {\"key\": \"Test\nwhile idle\", \"path\": \"true\"}, {\"key\": \"user\", \"path\": \"appsolicitous_dcra\"}, {\"key\": \"Max\nconnection idle time\", \"path\": \"300\"}]}, \"dateCreated\": \"2023-02-28 10:38:52.70 UTC\", \n\"dateModified\": null, \"featureTypes\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/datastores/mysqlllllll/featuretyp\nes.json\"}}\n</code></pre>"},{"location":"pages/cli/workspace/","title":"Workspaces","text":"<p><code>geoserverx</code> allows users to access all/one workspace from geoserver, along with ability to add new workspaces. </p> <p>Get started</p> <p>To start using <code>geoserverx</code> using command line, activate the Environment where package is installed and use <code>gsx</code> command</p>"},{"location":"pages/cli/workspace/#paramters-for-all-workspaces-command","title":"Paramters for all workspaces command","text":"<pre><code>$ gsx workspaces --help\n\nUsage: gsx workspaces [OPTIONS]\n\n  Get all workspaces in the Geoserver\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>As listed above, <code>workspaces</code> command accepts four parameters. </p> <ul> <li>request type ( sync or async )</li> <li>url - Geoserver REST URL</li> <li>password - Password for geoserver</li> <li>username - Username for geoserver</li> </ul> <p>All these parameters have default value setup which will work for local default installation</p>"},{"location":"pages/cli/workspace/#get-all-workspaces","title":"Get all workspaces","text":"<pre><code>$ gsx workspaces\n\n{\"workspaces\": {\"workspace\": [{\"name\": \"cesium\", \"href\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium.json\"}]}}\n</code></pre>"},{"location":"pages/cli/workspace/#get-all-workspaces-of-hosted-geoserver","title":"Get all workspaces of hosted geoserver","text":"<pre><code>$ gsx workspaces --url http://89.233.108.250:8080/geoserver/rest --password myPassword --username admin\n{\"workspaces\": {\"workspace\": [{\"name\": \"giz\", \"href\": \n\"http://89.233.108.250:8080/geoserver/rest/workspaces/giz.json\"}]}}\n</code></pre>"},{"location":"pages/cli/workspace/#paramters-to-get-single-workspace-command","title":"Paramters to get single workspace command","text":"<pre><code>$ gsx workspace --help\nUsage: gsx workspace [OPTIONS]\n\n  Get workspace in the Geoserver\n\nOptions:\n  --request [sync|async]  [default: requestEnum._sync]\n  --workspace TEXT        Workspace name  [required]\n  --url TEXT              Geoserver REST URL  [default:\n                          http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT         Geoserver Password  [default: geoserver]\n  --username TEXT         Geoserver username  [default: admin]\n  --help                  Show this message and exit.\n</code></pre> <p>As listed above, <code>workspace</code> accepts <code>workspace</code> parameter as the name of workspace </p>"},{"location":"pages/cli/workspace/#get-single-workspaces","title":"Get single workspaces","text":"<pre><code>$ gsx workspace --workspace cesium\n{\"workspace\": {\"name\": \"cesium\", \"isolated\": false, \"dateCreated\": \"2023-02-13 \n06:43:28.793 UTC\", \"dataStores\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/datastores.json\", \n\"coverageStores\": \n\"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/coveragestores.json\", \n\"wmsStores\": \"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/wmsstores.json\", \n\"wmtsStores\": \"http://127.0.0.1:8080/geoserver/rest/workspaces/cesium/wmtsstores.json\"}}\n</code></pre>"},{"location":"pages/cli/workspace/#paramters-for-create-workspace-command","title":"Paramters for create workspace command","text":"<pre><code>$ gsx create-workspace --help\nUsage: gsx create-workspace [OPTIONS]\n\n  Add workspace in the Geoserver\n\nOptions:\n  --request [sync|async]      [default: requestEnum._sync]\n  --workspace TEXT            Workspace name  [required]\n  --default / --no-default    Make workspace default?  [default: no-default]\n  --isolated / --no-isolated  Make workspace isolated?  [default: no-isolated]\n  --url TEXT                  Geoserver REST URL  [default:\n                              http://127.0.0.1:8080/geoserver/rest/]\n  --password TEXT             Geoserver Password  [default: geoserver]\n  --username TEXT             Geoserver username  [default: admin]\n  --help                      Show this message and exit.\n</code></pre> <p>As listed above, <code>create-workspace</code> command accepts parameters as follows</p> <ul> <li>workspace - name of workspace</li> <li>--default/--no-default - To keep workspace either default or not</li> <li>--isolated/--no-isolated - To keep workspace either isolated or not</li> </ul>"},{"location":"pages/cli/workspace/#create-single-workspaces","title":"Create single workspaces","text":"<pre><code>$ gsx create-workspace --workspace mydefaultws --default\ncode=201 response='Data added successfully'\n</code></pre>"},{"location":"pages/sync/","title":"Synchronous way of using geoserverx","text":"<p><code>geoserverx</code> allows user to call methods synchronously. </p> <p>Get started</p> <p>To start using <code>geoserverx</code> in Sync mode, create a new instance of <code>SyncGeoServerX</code> Class</p>"},{"location":"pages/sync/#setup-class-instance","title":"Setup Class instance","text":"<p><code>SyncGeoServerX</code> Class has default username, password, url which points to default geoserver settings.  <pre><code># Import class from package\nfrom geoserverx._sync.gsx import SyncGeoServerX \n# Create class Instance with default paramaters\nclient = SyncGeoServerX()\n</code></pre></p> <p>These paramaters however can be changed as follows <pre><code># Import class from package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n# Create class Instance with custom paramaters\nclient = SyncGeoServerX(username='mygeos', password='SecuredPass',url='http://127.0.0.1:9090/geoserver/rest/')\n</code></pre></p> <p>This class can also be used as context manager to manage the opening and closing connection automatically. <pre><code># Import class from package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n# Create class Instance with custom paramaters\nclient = SyncGeoServerX(username='mygeos', password='SecuredPass',url='http://127.0.0.1:9090/geoserver/rest/')\n\n#Using with as \nwith client as cl :\n    response = cl.get_all_workspaces()\n</code></pre></p>"},{"location":"pages/sync/example/","title":"Examples","text":"<p>Here, we'll have a look at implementation <code>geoserverx</code> synchronous Class</p> <p>Get started</p> <p>To start using <code>geoserverx</code> in Sync mode, create a new instance of <code>SyncGeoServerX</code> Class</p>"},{"location":"pages/sync/example/#setup-class-instance","title":"Setup Class instance","text":"<p><code>SyncGeoServerX</code> Class has default username, password, url which points to default geoserver settings.  <pre><code># Import class from package\nfrom geoserverx._sync.gsx import SyncGeoServerX \n# Create class Instance with default paramaters\nclient = SyncGeoServerX()\n</code></pre> We'll assume connection to local geoserver with default credentials</p>"},{"location":"pages/sync/example/#get-all-workspaces","title":"Get all workspaces","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_all_gs_workspaces(url, username, password):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance \n    client = SyncGeoServerX(username, password,url)\n    return client.get_all_workspaces()\n\nresult = get_all_gs_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver')\nprint(result.json())\n''' Console \n-------------start-----------------\n{\"workspaces\": {\"workspace\": [{\"name\": \"nondefaultws\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/nondefaultws.json\"}, \n{\"name\": \"mydefaultws\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/mydefaultws.json\"}, \n{\"name\": \"ajadasfasdf\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/ajadasfasdf.json\"}, \n{\"name\": \"ajada\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/ajada.json\"}, \n{\"name\": \"aja\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/aja.json\"}, {\"name\": \"cesium\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium.json\"}]}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#get-information-about-cesium-workspace","title":"Get Information about <code>cesium</code> workspace","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_single_workspaces(url, username, password,workspace):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.get_workspace(workspace)\n\nresult = get_single_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',workspace='cesium')\n\nprint(result.json())\n''' Console \n-------------start-----------------\n{\"workspace\": {\"name\": \"cesium\", \"isolated\": false, \"dateCreated\": \"2023-02-13 06:43:28.793 UTC\", \"dataStores\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/datastores.json\", \"coverageStores\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores.json\", \"wmsStores\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/wmsstores.json\", \"wmtsStores\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/wmtsstores.json\"}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#create-new-workspaces","title":"Create New workspaces","text":"<ul> <li>MyDefault - Default and not Isolated</li> <li>MyHidden - Not Default and Isolated</li> <li>MySimple - Not Default and not Isolated</li> </ul> <p><pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\n\ndef create_single_workspaces(url, username, password,workspace,default,isolated):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.create_workspace(workspace, default,isolated)\n\nfirst = create_single_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='MyDefault',default=True,isolated= False)\nprint(first.json())\nsecond = create_single_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='MyHidden',default=False,isolated= True)\nprint(second.json())\nthird = create_single_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='MySimple',default=False,isolated= False)\nprint(third.json())\n''' Console \n-------------start-----------------\n-------------start-----------------\n-------------start-----------------\ncode=201 response='Data added successfully'\ncode=201 response='Data added successfully'\ncode=201 response='Data added successfully'\n'''\n</code></pre> </p>"},{"location":"pages/sync/example/#get-all-vector-stores-in-cesium-workspace","title":"Get all Vector stores in <code>cesium</code> workspace","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_all_vector_workspaces(url, username, password,workspace):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.get_vector_stores_in_workspaces(workspace)\n\nresult = get_vector_store(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium')\nprint(result.json())\n\n''' Console \n-------------start-----------------\n{\"dataStores\": {\"dataStore\": [{\"name\": \"mysqlllllll\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/datastores/mysqlllllll.json\"}]}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#get-information-of-vector-store-mysqldb-in-cesium-workspace","title":"Get Information of Vector store <code>mysqldb</code> in <code>cesium</code> workspace","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_info_vector_workspaces(url, username, password,workspace,store):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.get_vector_store(workspace,store)\n\nresult = get_info_vector_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium',store='mysqldb' )\nprint(result.json())\n\n''' Console \n-------------start-----------------\n{\"dataStore\": {\"name\": \"mysqldb\", \"description\": null, \"enabled\": true, \n\"workspace\": {\"name\": \"cesium\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium.json\"}, \n\"connectionParameters\": {\"entry\": [{\"key\": \"Evictor run periodicity\", \"path\": \"300\"}, {\"key\": \"fetch size\", \"path\": \"1000\"}, {\"key\": \"Expose primary keys\", \"path\": \"false\"}, {\"key\": \"validate connections\", \"path\": \"true\"}, {\"key\": \"Connection timeout\", \"path\": \"20\"}, {\"key\": \"Batch insert size\", \"path\": \"1\"}, {\"key\": \"database\", \"path\": \"appsolicitous_dcra\"}, {\"key\": \"port\", \"path\": \"3306\"}, {\"key\": \"passwd\", \"path\": \"crypt1:jxnPgWTsBoUAVin1wtCLWgIqmZ4DSEWx\"}, {\"key\": \"storage engine\", \"path\": \"MyISAM\"}, {\"key\": \"min connections\", \"path\": \"1\"}, {\"key\": \"dbtype\", \"path\": \"mysql\"}, {\"key\": \"host\", \"path\": \"23.29.118.44\"}, {\"key\": \"namespace\", \"path\": \"cesium\"}, {\"key\": \"max connections\", \"path\": \"10\"}, {\"key\": \"Evictor tests per run\", \"path\": \"3\"}, {\"key\": \"Test while idle\", \"path\": \"true\"}, {\"key\": \"user\", \"path\": \"appsolicitous_dcra\"}, {\"key\": \"Max connection idle time\", \"path\": \"300\"}]}, \"dateCreated\": \"2023-02-28 10:38:52.70 UTC\", \"dateModified\": null, \n\"featureTypes\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/datastores/mysqlllllll/featuretypes.json\"}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#create-new-shapefile-vector-store-in-cesium-workspace-with-name-natural_earth","title":"Create new shapefile Vector store in <code>cesium</code> workspace with name <code>natural_earth</code>","text":"<p>Create new store using Shapefile available at given path <pre><code>from geoserverx._sync.gsx import SyncGeoServerX\n\ndef add_vector_workspaces(url, username, password,workspace,store,file):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.create_file_store(workspace, store, file, service_type='shapefile') \n\nresult = add_vector_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium',store='natural_earth', file='/Users/krishnaglodha/Downloads/ne_10m_populated_places_simple/ne_10m_populated_places_simple.shp' )\nprint(result.json())\n''' Console \n-------------start-----------------\n{\"code\": 201, \"response\": \"Data added successfully\"}\n'''\n</code></pre></p> <p></p>"},{"location":"pages/sync/example/#get-all-raster-stores-in-cesium-workspace","title":"Get all Raster stores in <code>cesium</code> workspace","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_all_raster_workspaces(url, username, password,workspace):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.get_raster_stores_in_workspaces(workspace)\n\nresult = get_all_raster_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium')\nprint(result.json())\n\n''' Console \n-------------start-----------------\n{\"coverageStores\": {\"coverageStore\": [{\"name\": \"dem\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/dem.json\"}, {\"name\": \"dsm\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm.json\"}, {\"name\": \"ortho\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/ortho.json\"}]}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#get-information-of-raster-store-dsm-in-cesium-workspace","title":"Get Information of Raster store <code>dsm</code> in <code>cesium</code> workspace","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_info_raster_workspaces(url, username, password,workspace,store):\n    print(\"-------------start-----------------\")\n    # Setup Class Instance\n    client = SyncGeoServerX(username, password,url)\n    return client.get_raster_store(workspace,store)\n\nresult = get_info_raster_workspaces(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',\nworkspace='cesium',store='dsm' )\nprint(result.json())\n\n''' Console \n-------------start-----------------\n{\"coverageStore\": {\"name\": \"dsm\", \"description\": null, \"enabled\": true, \"workspace\": {\"name\": \"cesium\", \"href\": \"http://localhost:8080/geoserver/rest/workspaces/cesium.json\"}, \"url\": \"file:///Users/krishnaglodha/Desktop/IGI_DATA/DSM/IGI_DSM1m1.tif\", \"coverages\": \"http://localhost:8080/geoserver/rest/workspaces/cesium/coveragestores/dsm/coverages.json\", \"dateCreated\": \"2023-02-23 13:39:48.417 UTC\", \"metadata\": null}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#get-all-styles-in-geoserver","title":"Get all Styles in geoserver","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_all_styles(url, username, password):\n    print(\"-------------start-----------------\")\n\n    client = SyncGeoServerX(username, password,url)\n    return client.get_allstyles()\n\nresult = get_all_styles(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver' )\nprint(result.json())\n\n''' Console \n-------------start-----------------\n{\"styles\": {\"style\": [{\"name\": \"burg\", \"href\": \"http://localhost:8080/geoserver/rest/styles/burg.json\"}, {\"name\": \"capitals\", \"href\": \"http://localhost:8080/geoserver/rest/styles/capitals.json\"}, {\"name\": \"cite_lakes\", \"href\": \"http://localhost:8080/geoserver/rest/styles/cite_lakes.json\"}, {\"name\": \"dem\", \"href\": \"http://localhost:8080/geoserver/rest/styles/dem.json\"}, {\"name\": \"generic\", \"href\": \"http://localhost:8080/geoserver/rest/styles/generic.json\"}, {\"name\": \"giant_polygon\", \"href\": \"http://localhost:8080/geoserver/rest/styles/giant_polygon.json\"}, {\"name\": \"grass\", \"href\": \"http://localhost:8080/geoserver/rest/styles/grass.json\"}, {\"name\": \"green\", \"href\": \"http://localhost:8080/geoserver/rest/styles/green.json\"}, {\"name\": \"line\", \"href\": \"http://localhost:8080/geoserver/rest/styles/line.json\"}, {\"name\": \"poi\", \"href\": \"http://localhost:8080/geoserver/rest/styles/poi.json\"}, {\"name\": \"point\", \"href\": \"http://localhost:8080/geoserver/rest/styles/point.json\"}, {\"name\": \"poly_landmarks\", \"href\": \"http://localhost:8080/geoserver/rest/styles/poly_landmarks.json\"}, {\"name\": \"polygon\", \"href\": \"http://localhost:8080/geoserver/rest/styles/polygon.json\"}, {\"name\": \"pophatch\", \"href\": \"http://localhost:8080/geoserver/rest/styles/pophatch.json\"}, {\"name\": \"population\", \"href\": \"http://localhost:8080/geoserver/rest/styles/population.json\"}, {\"name\": \"rain\", \"href\": \"http://localhost:8080/geoserver/rest/styles/rain.json\"}, {\"name\": \"raster\", \"href\": \"http://localhost:8080/geoserver/rest/styles/raster.json\"}, {\"name\": \"restricted\", \"href\": \"http://localhost:8080/geoserver/rest/styles/restricted.json\"}, {\"name\": \"simple_roads\", \"href\": \"http://localhost:8080/geoserver/rest/styles/simple_roads.json\"}, {\"name\": \"simple_streams\", \"href\": \"http://localhost:8080/geoserver/rest/styles/simple_streams.json\"}, {\"name\": \"tiger_roads\", \"href\": \"http://localhost:8080/geoserver/rest/styles/tiger_roads.json\"}]}}\n'''\n</code></pre>"},{"location":"pages/sync/example/#get-single-style-in-geoserver","title":"Get Single Style in geoserver","text":"<pre><code># Import Class from Package\nfrom geoserverx._sync.gsx import SyncGeoServerX\n\ndef get_style_info(url, username, password,style):\n    print(\"-------------start-----------------\")\n\n    client = SyncGeoServerX(username, password,url)\n    return client.get_style(style)\n\nresult = get_style_info(url='http://localhost:8080/geoserver/rest/',username='admin', password='geoserver',style='poi' )\nprint(result.json())\n''' Console \n-------------start-----------------\n{\"style\": {\"name\": \"poi\", \"format\": \"sld\", \"languageVersion\": {\"version\": \"1.0.0\"}, \"filename\": \"poi.sld\"}}\n'''\n</code></pre>"},{"location":"pages/sync/raster-store/","title":"Raster Stores","text":"<p><code>geoserverx</code> allows users to access all/one raster stores from geoserver</p>"},{"location":"pages/sync/raster-store/#get-all-raster-stores","title":"Get all raster stores","text":"<p>This command fetches all Vector store available in given workspace from geoserver. </p> <pre><code># Get all raster stores available in `cite` workspace\nclient.get_raster_stores_in_workspaces('cite')\n</code></pre>"},{"location":"pages/sync/raster-store/#get-single-raster-store","title":"Get single raster store","text":"<p>This command fetches all Information about raster store available in given workspace from geoserver. </p> <pre><code># Get all information about `image` raster stores available in `cite` workspace\n\nclient.get_raster_store(workspace='cite', store='image') \n</code></pre>"},{"location":"pages/sync/style/","title":"Style","text":""},{"location":"pages/sync/style/#get-all-styles","title":"Get all Styles","text":"<p>This command fetches all Styles available in geoserver. </p> <pre><code># Get all styles available in geoserver\nclient.get_allstyles()\n</code></pre>"},{"location":"pages/sync/style/#get-single-style","title":"Get single Style","text":"<p>This command fetches information about particular Style from geoserver. </p> <pre><code># Get information about `population` style from geoserver\nclient.get_style('population') \n</code></pre>"},{"location":"pages/sync/vector-store/","title":"Vector Stores","text":"<p><code>geoserverx</code> allows users to access all/one vector stores from geoserver. As of now, <code>geoserverx</code> also supports new vector store creation for <code>shapefile</code> and <code>gpkg</code> data</p>"},{"location":"pages/sync/vector-store/#get-all-vector-stores","title":"Get all Vector stores","text":"<p>This command fetches all Vector store available in given workspace from geoserver. </p> <pre><code># Get all vector stores available in `cite` workspace\nclient.get_vector_stores_in_workspaces('cite')\n</code></pre>"},{"location":"pages/sync/vector-store/#get-single-vector-store","title":"Get single Vector store","text":"<p>This command fetches all Information about Vector store available in given workspace from geoserver. </p> <pre><code># Get all information about `shape` vector stores available in `cite` workspace\n\nclient.get_vector_store(workspace='cite', store='shape') \n</code></pre>"},{"location":"pages/sync/vector-store/#create-new-shapefile-vector-store","title":"Create new shapefile Vector store","text":"<p>Use this command to create new Vector store based on <code>shapefile</code> path. </p> <pre><code># Create new store in `cite` workspace with name `shape` and using `path/for/shapefile` as local shapefile path\nclient.create_file_store(workspace='cite', store='shape', file='path/for/shapefile', service_type='shapefile') \n</code></pre>"},{"location":"pages/sync/vector-store/#create-new-geopackage-vector-store","title":"Create new geopackage Vector store","text":"<p>Use this command to create new Vector store based on <code>Geopackage</code> path. </p> <pre><code># Create new store in `cite` workspace with name `shape` and using `path/for/gpkg` as local Geopackage path\nclient.create_file_store(workspace='cite', store='shape', file='path/for/gpkg', service_type='gpkg') \n</code></pre>"},{"location":"pages/sync/vector-store/#create-new-postgis-vector-store","title":"Create new PostGIS Vector store","text":"<p>Use this command to create new Vector store based on <code>PostGIS</code> connection. </p> <pre><code># Create new store in `cite` workspace with name `pg` and using `PostgreSQL` credentials\nclient.create_pg_store(\n        name=\"pg\",\n        workspace=\"cite\",\n        host=\"localhost\",\n        port=5432,\n        username=\"XXXXXXXX\",\n        password=\"XXXXXXXX\",\n        database=\"test\")\n</code></pre>"},{"location":"pages/sync/workspace/","title":"Workspaces","text":"<p><code>geoserverx</code> allows users to access all/one workspace from geoserver, along with ability to add new workspaces. </p>"},{"location":"pages/sync/workspace/#get-all-workspaces","title":"Get all workspaces","text":"<p>This command fetches all workspaces available in geoserver. No paramters are required to be passed.</p> <pre><code># Get all workspaces in geoserver\nclient.get_all_workspaces()\n</code></pre>"},{"location":"pages/sync/workspace/#get-single-workspace","title":"Get single workspace","text":"<p>This command fetches workspace with paramter as name of it from geoserver. <pre><code># Get workspace with name `cite`\nclient.get_workspace('cite')\n</code></pre></p>"},{"location":"pages/sync/workspace/#create-workspace","title":"Create workspace","text":"<p>This command allows user to create new workspace.  Creating new workspace requires following parameters</p> <ul> <li>Name <code>str</code> : To define Name of the workspace</li> <li>default <code>bool</code> : To define whether to keep workspace as default or not</li> <li>Isolated <code>bool</code> : To define whether to keep workspace Isolated or not</li> </ul> <pre><code>#Create new workspace with name `my_wrkspc` , make it Default and Isolated\nclient.create_workspace(name='my_wrkspc',default=True,Isolated=True)\n</code></pre>"}]}